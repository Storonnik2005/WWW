#include "Utils.h"  // Подключение заголовочного файла Utils.h, содержащего объявления функций.
#include <sys/stat.h>  // Подключение библиотеки для работы с файловыми атрибутами.
#include <direct.h>  // Подключение библиотеки для создания директорий (например, _mkdir).
#include <io.h>      // Подключение библиотеки для проверки доступа к файлам (например, _access).
#include <fstream>   // Подключение библиотеки для работы с файлами через потоки.

// Реализация функции для проверки существования файла или директории.
bool fileExists(const std::string& path) {
    return _access(path.c_str(), 0) == 0;  // Использует _access для проверки доступности пути.
}
// Комментарий: Возвращает true, если файл или директория существует, и false в противном случае.

// Реализация функции для получения размера файла.
size_t getFileSize(const std::string& path) {
    std::ifstream file(path, std::ios::binary | std::ios::ate);  // Открывает файл в бинарном режиме и перемещает указатель в конец.
    return file ? static_cast<size_t>(file.tellg()) : 0;  // Если файл открыт, возвращает его размер (позиция указателя), иначе 0.
}
// Комментарий: Возвращает размер файла в байтах. Если файл не существует или не может быть открыт, возвращает 0.

// Реализация функции для создания директории.
bool createDirectory(const std::string& path) {
    return _mkdir(path.c_str()) == 0;  // Использует _mkdir для создания директории.
}
// Комментарий: Возвращает true, если директория успешно создана, и false в противном случае.

// Реализация функции для получения имени файла из полного пути.
std::string getFileName(const std::string& path) {
    size_t pos = path.find_last_of("/\\");  // Находит последний слэш ('/' или '\') в пути.
    return pos == std::string::npos ? path : path.substr(pos + 1);  // Если слэш не найден, возвращает весь путь, иначе — подстроку после слэша.
}
// Комментарий: Извлекает имя файла из полного пути.

// Реализация функции для копирования файла.
bool copyFile(const std::string& sourcePath, const std::string& destPath) {
    std::ifstream src(sourcePath, std::ios::binary);  // Открывает исходный файл в бинарном режиме.
    std::ofstream dst(destPath, std::ios::binary);    // Создает целевой файл в бинарном режиме.
    if (!src || !dst) return false;  // Если один из файлов не может быть открыт, возвращает false.
    dst << src.rdbuf();  // Копирует содержимое исходного файла в целевой.
    return true;  // Возвращает true, если копирование успешно завершено.
}
// Комментарий: Копирует содержимое файла из sourcePath в destPath. Возвращает true при успехе.